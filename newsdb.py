#! /usr/bin/env python 2.7.12

import psycopg2

DBNAME = "news"


def clear_article_views():
	"""Clear rows in table article_views."""
	db = psycopg2.connect(database=DBNAME)
	c = db.cursor()
	c.execute("delete * from article_views")
	db.commit()
	db.close()


def article_views():
	"""Populate a table article_views from the info in previously created view
	article_path_views. The table article_views has two columns: article's slug,
	and article's views."""
	db = psycopg2.connect(database=DBNAME)
	c = db.cursor()

	# extract result from view article_path_views
	c.execute("select * from article_path_views")
	article_path_views = c.fetchall()
	# populate table article_views via insert query
	for i in article_path_views:
		slug = i[0][9:]
		views = i[1]
		c.execute("insert into article_views values (%s, %s)", (slug, views))
		db.commit()
	db.close()


def table_to_report(table, measure):
	"""Return a report with info in argument table.

	Args:
		table: an instance generated by c.fetchall(). table is a list of tuples
		and each tuple has only two values.
		measure: a unit of measure in string format.

	Returns:
		A report in the following form, where the first vaule in an above said
		tuple is before dash, the second value in the tuple is after dash, then
		a space followed by measure:
		'first value in tuple' - 'second value in tuple' 'measure'

		Example:
		John Smith - 1000 views
		Sun will also rise tomorrow - 10 clicks
	"""
	report = ''
	for i in table:
		value1_in_i = i[0]
		value2_in_i = str(i[1])
		report = report + value1_in_i + ' - ' + value2_in_i + measure + '\n'
	return report


def top_three_articles():
	"""Return a report of top three of most viewed articles, most viewed first.
	"""
	db = psycopg2.connect(database=DBNAME)
	c = db.cursor()
	c.execute("""select articles.title,
						article_views.views
				from articles, article_views
				where articles.slug = article_views.slug
				order by views desc
				limit 3""")
	result_table = c.fetchall()

	# generate a report from table_to_report() function
	report = table_to_report(result_table, ' views')
	db.close()
	return "The Top Three of Most Viewed Articles:\n" + report


def popular_authors():
	"""Return a report of authors and their artilces' total views,
	author with most views first.
	"""
	db = psycopg2.connect(database=DBNAME)
	c = db.cursor()
	c.execute("""select authors.name, sum(views)
				from authors, articles, article_views
				where authors.id = articles.author
					and articles.slug = article_views.slug
				group by authors.name
				order by sum desc""")
	result_table = c.fetchall()

	# generate a report from table_to_report() function
	report = table_to_report(result_table, ' views')
	db.close()
	return "Authors and Their Articles' Total Views:\n" + report


def error_rate():
	"""Return a report of days where over 1% of requests leading to errors."""
	db = psycopg2.connect(database=DBNAME)
	c = db.cursor()
	c.execute("""select to_char(date, 'Month FMDD, YYYY') as date,
						round(error_rate * 100, 2) as error_rate
				from daily_error_rate
				where round(error_rate * 100, 2) > 1.00""")
	result_table = c.fetchall()

	# generate a report from table_to_report function
	report = table_to_report(result_table, '%')
	db.close()
	return "Days Where Over 1% of Requests Leading to Errors:\n" + report

print top_three_articles()
print popular_authors()
print error_rate()
