#! /usr/bin/env python3

import psycopg2

DBNAME = "news"


def table_to_report(table, measure):
    """Return a report by taking arguments table and measure.

    Args:
        table: an instance generated by c.fetchall(). table is a list of tuples
        and each tuple has only two values.
        measure: a unit of measure in string format.

    Returns:
        A report in the following form, where the first vaule in an above said
        tuple is before dash, the second value in the tuple is after dash, then
        a space followed by measure:
        'first value in tuple' - 'second value in tuple' 'measure'

        Example:
        John Smith - 1000 views
        Sun will also rise tomorrow - 10 clicks
    """
    report = ''
    for i in table:
        report += '{} - {}{}\n'.format(i[0], i[1], measure)
    return report


def execute_query(query):
    """execute_query takes an SQL query as an argument.
       Executes the query and returns the results as a list of tuples.
       Args:
           query - an SQL query statement to be executed.

       Returns:
           A list of tuples containing the results of the query.
    """
    try:
        db = psycopg2.connect(database=DBNAME)
        c = db.cursor()
        c.execute(query)
        result_table = c.fetchall()
        db.close()
        return result_table
    except (Exception, psycopg2.DatabaseError) as error:
        print(error)


def top_three_articles():
    """Return a report of top three of most viewed articles, most viewed first.
    """
    query = """select articles.title,
                      article_path_views.views
                 from articles, article_path_views
                where '/article/' || articles.slug = article_path_views.path
             order by views desc
                limit 3"""
    result_table = execute_query(query)

    # generate a report from table_to_report() function
    report = table_to_report(result_table, ' views')
    return "The Top Three of Most Viewed Articles:\n" + report


def popular_authors():
    """Return a report of authors and their artilces' total views,
       author with most views first.
    """
    query = """select authors.name, sum(views)
                 from authors, articles, article_path_views
                where authors.id = articles.author
                  and '/article/' || articles.slug = article_path_views.path
             group by authors.name
             order by sum desc"""
    result_table = execute_query(query)

    # generate a report from table_to_report() function
    report = table_to_report(result_table, ' views')
    return "Authors and Their Articles' Total Views:\n" + report


def error_rate():
    """Return a report of days where over 1% of requests leading to errors.
    """
    query = """select to_char(date, 'FMMonth DD, YYYY') as date,
                      round(error_req::numeric/total_req*100, 2) as error_rate
                 from daily_errorreq_totalreq
                where round(error_req::numeric/total_req*100, 2) > 1.00"""
    result_table = execute_query(query)

    # generate a report from table_to_report function
    report = table_to_report(result_table, '%')
    return "Days Where Over 1% of Requests Leading to Errors:\n" + report

if __name__ == '__main__':
    print(top_three_articles())
    print(popular_authors())
    print(error_rate())
